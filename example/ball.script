go.property("speed", 300)

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "use_fixed_fit_projection", { near = -10, far = 10})
	msg.post("camera", "acquire_camera_focus")
	self.direction = vmath.vector3(0)

	go.animate("/blue_light#lightsource", "radius", go.PLAYBACK_LOOP_PINGPONG, 0, go.EASING_INOUTQUAD, 4.0)
end

function update(self, dt)
	local pos = go.get_position()
	local movement_force = self.direction * 1000000 * dt
	msg.post("#collisionobject", "apply_force", { position = pos, force = movement_force })

	local dist = vmath.length(pos)
	if dist > 400 then
		local dir = vmath.normalize(pos)
		local center_force = math.sqrt(dist) * dir * 50000 * dt
		msg.post("#collisionobject", "apply_force", { position = pos, force = -center_force })
	end
end

function on_input(self, action_id, action)
	if action_id == hash("left") then
		if action.pressed then
			self.direction.x = -1
		elseif action.released and self.direction.x == -1 then
			self.direction.x = 0
		end
	elseif action_id == hash("right") then
		if action.pressed then
			self.direction.x = 1
		elseif action.released and self.direction.x == 1 then
			self.direction.x = 0
		end
	elseif action_id == hash("up") then
		if action.pressed then
			self.direction.y = 1
		elseif action.released and self.direction.y == 1 then
			self.direction.y = 0
		end
	elseif action_id == hash("down") then
		if action.pressed then
			self.direction.y = -1
		elseif action.released and self.direction.y == -1 then
			self.direction.y = 0
		end
	end
end