local camera = require "orthographic.camera"

local lights = require "lights.lights"

camera.ORTHOGRAPHIC_RENDER_SCRIPT_USED = true

local CLEAR_COLOR = hash("clear_color")

function init(self)
	self.occluder_pred = render.predicate({"light_occluder"})
	self.tile_pred = render.predicate({"tile"})
	self.gui_pred = render.predicate({"gui"})
	self.text_pred = render.predicate({"text"})
	self.particle_pred = render.predicate({"particle"})

	self.clear_color = vmath.vector4(0, 0, 0, 0)
	self.clear_color.x = sys.get_config("render.clear_color_red", 0)
	self.clear_color.y = sys.get_config("render.clear_color_green", 0)
	self.clear_color.z = sys.get_config("render.clear_color_blue", 0)
	self.clear_color.w = sys.get_config("render.clear_color_alpha", 0)

	lights.init()
	lights.set_clear_color(self.clear_color)
end

function update(self)
	camera.get_cameras()
	local viewport = camera.get_viewport()
	local view = camera.get_view()
	local projection = camera.get_projection()
	
	render.clear({[render.BUFFER_COLOR_BIT] = self.clear_color, [render.BUFFER_DEPTH_BIT] = 1, [render.BUFFER_STENCIL_BIT] = 0})

	lights.draw(view, projection, self.occluder_pred)

	-- draw world
	render.set_viewport(viewport.x, viewport.y, viewport.z, viewport.w)
	render.set_view(view)
	render.set_projection(projection)

	render.set_depth_mask(false)
	render.disable_state(render.STATE_DEPTH_TEST)
	render.disable_state(render.STATE_STENCIL_TEST)
	render.enable_state(render.STATE_BLEND)
	render.set_blend_func(render.BLEND_SRC_ALPHA, render.BLEND_ONE_MINUS_SRC_ALPHA)
	render.disable_state(render.STATE_CULL_FACE)

	render.draw(self.tile_pred)
	render.draw(self.particle_pred)
	render.draw_debug3d()

	-- draw gui in screen space using an orthographic projection
	render.set_viewport(0, 0, render.get_window_width(), render.get_window_height())
	render.set_view(vmath.matrix4())
	render.set_projection(vmath.matrix4_orthographic(0, render.get_window_width(), 0, render.get_window_height(), -1, 1))

	render.enable_state(render.STATE_STENCIL_TEST)
	render.draw(self.gui_pred)
	render.draw(self.text_pred)
	render.disable_state(render.STATE_STENCIL_TEST)

	render.set_depth_mask(false)
end

function on_message(self, message_id, message)
	if message_id == CLEAR_COLOR then
		self.clear_color = message.color
		lights.set_clear_color(self.clear_color)
	end
end
